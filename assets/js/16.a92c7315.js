(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{400:function(n,t,e){"use strict";e.r(t);var s=e(8),i=Object(s.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://github.com/ronnaces/ronna-screen",target:"_blank",rel:"noopener noreferrer"}},[this._v("完整版"),t("OutboundLink")],1),this._v("目录结构")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("├── .github  # GitHub 配置文件\n│   ├── ISSUE_TEMPLATE  # 问题提交参考模板\n│   ├── workflows git  # 工作流\n├── .husky  # 代码提交前校验配置文件\n├── .vscode  # IDE 工具推荐配置文件\n│   │   ├── extensions.json  # 一键安装平台推荐的 vscode 插件\n│   │   ├── settings.json  # 设置扩展程序或 vscode 编辑器的一些属性\n│   │   ├── vue3.0.code-snippets  # vue3.0 代码片段\n│   │   └── vue3.2.code-snippets  # vue3.2 代码片段\n│   │   └── vue3.3.code-snippets  # vue3.3 代码片段\n├── build  # 构建工具\n│   │   ├── cdn.ts  # 打包时采用 cdn 模式\n│   │   ├── compress.ts  # 打包时启用 gzip 压缩或 brotli 压缩\n│   │   ├── info.ts  # 输出打包信息（大小、用时）\n│   │   ├── optimize.ts  # vite 依赖预构建配置项\n│   │   ├── plugins.ts  # vite 相关插件存放处\n│   │   ├── utils.ts  # 构建工具常用方法抽离\n├── locales  # 国际化文件存放处\n│   │   ├── en.yaml  # 英文配置\n│   │   ├── zh-CN.yaml  # 中文配置\n├── docker   # docker 配置文件\n├── mock  # mock 模拟后台数据\n│   │   ├── asyncRoutes.ts  # 模拟后台返回动态路由\n│   │   ├── ...\n├── node_modules  # 模块依赖\n├── public  # 静态资源\n│   │   ├── audio  # 音频文件\n│   │   ├── html  # 静态 iframe 页面\n│   │   ├── wasm  # wasm 文件以及胶水代码\n│   │   ├── favicon.ico  # favicon\n│   │   ├── logo.svg  # logo\n│   │   ├── platform-config.json  # 全局配置文件（打包后修改也可生效）\n├── src\n│   ├── App.vue  # 入口页面\n│   ├── main.ts  # 入口文件\n├── .browserslistrc  # 配置目标浏览器的环境\n├── .dockerignore  # 排除不需要上传到 docker 服务端的文件或目录\n├── .editorconfig  # 编辑器读取文件格式及样式定义配置 https://editorconfig.org/\n├── .env  # 全局环境变量配置（当 .env 文件与 .env.development、.env.production、.env.staging 这三个文件之一存在相同的配置 key 时，.env 优先级更低）\n├── .env.development  # 开发环境变量配置\n├── .env.production  # 生产环境变量配置\n├── .env.staging  # 预发布环境变量配置\n├── .eslintignore  # eslint 语法检查忽略文件\n├── .gitattributes  # 自定义指定文件属性\n├── .gitignore  # git 提交忽略文件\n├── .gitpod.yml  # gitpod 部署配置\n├── .lintstagedrc  # lint-staged 配置\n├── .markdownlint.json  # markdown 格式检查配置\n├── .npmrc  # npm 配置文件\n├── .nvmrc  # 用于指定在使用 Node Version Manager（NVM）时要使用的特定 Node.js 版本\n├── .prettierignore  # prettier 语法检查忽略文件\n├── .prettierrc.js  # prettier 插件配置\n├── .stylelintignore  # stylelint 语法检查忽略文件\n├── CHANGELOG.en_US.md  # 版本更新日志（英文版）\n├── CHANGELOG.md  # 版本更新日志（英文版）\n├── CHANGELOG.zh_CN.md  # 版本更新日志（中文版）\n├── commitlint.config.js  # git 提交前检查配置\n├── Dockerfile  # 用来构建 docker 镜像\n├── eslint.config.js  # eslint 语法检查配置\n├── index.html  # html 主入口\n├── LICENSE  # 证书\n├── package.json  # 依赖包管理以及命令配置\n├── pnpm-lock.yaml  # 依赖包版本锁定文件\n├── postcss.config.js  # postcss 插件配置\n├── README.en-US.md  # README（英文版）\n├── README.md  # README\n├── stylelint.config.js  # stylelint 配置\n├── tailwind.config.ts  # tailwindcss 配置\n├── tsconfig.json  # typescript 配置\n└── vite.config.ts  # vite 配置\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);